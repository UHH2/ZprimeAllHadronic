// std::unique_ptr<GenericJetCorrector> jetAK8corrector;
    //std::unique_ptr<GenericTopJetCorrector> jetAK8corrector;
    //std::unique_ptr<GenericTopJetCorrector> jetCA15corrector;
    // std::unique_ptr<GenericTopJetCorrector> jetHEPcorrector;

    //std::unique_ptr<GenericSubJetCorrector> subjetAK8corrector;
    //std::unique_ptr<GenericSubJetCorrector> subjetCA15corrector;
    // std::unique_ptr<GenericSubJetCorrector> subjetHEPcorrector;

    // uhh2::Event::Handle<std::vector<Jet> > h_jetsAK8;
    //uhh2::Event::Handle<std::vector<TopJet> > h_topjetsAK8;
    //uhh2::Event::Handle<std::vector<TopJet> > h_topjetsCA15;
    // uhh2::Event::Handle<std::vector<TopJet> > h_topjetsHEP;

    //std::vector<std::unique_ptr<GenericJetCorrector> > jet_correctors;
    //std::vector<std::unique_ptr<GenericTopJetCorrector> > topjet_correctors;
    //std::vector<std::unique_ptr<GenericSubJetCorrector> > subjet_correctors;
    //std::vector<std::string> jet_collection_names;
    //std::vector<std::string> topjet_collection_names;

    // declare the Selections to use. Use unique_ptr to ensure automatic call of delete in the destructor,
    // to avoid memory leaks.
    // std::unique_ptr<Selection> njet_sel, bsel;
    // std::unique_ptr<Selection> toptag_sel;
    // std::unique_ptr<Selection> toptaggroom_sel;
    // std::unique_ptr<Selection> toptaghep_sel;

    //uhh2::Event::Handle<std::vector<TopJet> > h_topjetsAK8;
    //uhh2::Event::Handle<std::vector<TopJet> > h_topjetsCA15;

// In the constructor, the typical tasks are to create
    // other modules like cleaners (1), selections (2) and Hist classes (3).
    // But you can do more and e.g. access the configuration, as shown below.
    
    // cout << "Hello World from PreselectionModule!" << endl;
    
    // If needed, access the configuration of the module here, e.g.:
    // string testvalue = ctx.get("TestKey", "<not set>");
    // cout << "TestKey in the configuration was: " << testvalue << endl;
    
    // If running in SFrame, the keys "dataset_version", "dataset_type" and "dataset_lumi"
    // are set to the according values in the xml file. For CMSSW, these are
    // not set automatically, but can be set in the python config file.
    // for(auto & kv : ctx.get_all()){
    //     cout << " " << kv.first << " = " << kv.second << endl;
    // }
    // h_jetsAK8 = ctx.declare_event_input<std::vector<Jet> >("patJetsCa8CHSJets");//, "slimmedJetsAK8");
    // h_topjetsCA8 = ctx.declare_event_input<std::vector<TopJet> >("patJetsCa8CHSJetsPrunedPacked");//, "patJetsCA8CHSprunedPacked");
    // h_topjetsCA15 = ctx.declare_event_input<std::vector<TopJet> >("patJetsCa15CHSJetsFilteredPacked");//, "patJetsCA15CHSFilteredPacked");
    // h_topjetsHEP = ctx.declare_event_input<std::vector<TopJet> >("patJetsHepTopTagCHSPacked");//, "patJetsHEPTopTagCHSPacked");

    // h_jetsAK8 = ctx.declare_event_output<std::vector<Jet> >("patJetsCa8CHSJets");//, "slimmedJetsAK8");
    // h_topjetsCA8 = ctx.declare_event_output<std::vector<TopJet> >("patJetsCa8CHSJetsPrunedPacked");//, "patJetsCA8CHSprunedPacked");
    // h_topjetsCA15 = ctx.declare_event_output<std::vector<TopJet> >("patJetsCa15CHSJetsFilteredPacked");//, "patJetsCA15CHSFilteredPacked");
    // h_topjetsHEP = ctx.declare_event_output<std::vector<TopJet> >("patJetsHepTopTagCHSPacked");//, "patJetsHEPTopTagCHSPacked");
    // 1. setup other modules. Here, only the jet cleaner

//jetAK8corrector.reset(new GenericJetCorrector(ctx,JERFiles::PHYS14_L123_AK8PFchs_MC,"patJetsCa8CHSJets"));
    //jetAK8corrector.reset(new GenericTopJetCorrector(ctx,JERFiles::PHYS14_L123_AK8PFchs_MC,"patJetsAk8CHSJetsSoftDropPacked_daughters"));
    //jetCA15corrector.reset(new GenericTopJetCorrector(ctx,JERFiles::PHYS14_L123_AK8PFchs_MC,"patJetsCa15CHSJetsFilteredPacked_daughters"));
    // jetHEPcorrector.reset(new GenericTopJetCorrector(ctx,JERFiles::PHYS14_L123_AK8PFchs_MC,"patJetsHepTopTagCHSPacked"));

    //subjetAK8corrector.reset(new GenericSubJetCorrector(ctx,JERFiles::PHYS14_L123_MC,"patJetsAk8CHSJetsSoftDropPacked_daughters"));
    //subjetCA15corrector.reset(new GenericSubJetCorrector(ctx,JERFiles::PHYS14_L123_MC,"patJetsCa15CHSJetsFilteredPacked_daughters"));
    // subjetHEPcorrector.reset(new GenericSubJetCorrector(ctx,JERFiles::PHYS14_L123_MC,"patJetsHepTopTagCHSPacked"));
    
    // 2. set up selections:
    // njet_sel.reset(new NJetSelection(2));
    // bsel.reset(new NBTagSelection(1));
    // const TopJetId topjetID = CMSTopTag();
    // const TopJetId topjetIDgroom = CMSTopTag(CMSTopTag::MassType::groomed);
    // const TopJetId topjetIDhep = HEPTopTag();
    // toptag_sel.reset(new NTopJetSelection(1,-1,topjetID));
    // toptaggroom_sel.reset(new NTopJetSelection(1,-1,topjetIDgroom));
    // toptaghep_sel.reset(new NTopJetSelection(1,-1,topjetIDhep));

    // 3. Set up Hists classes:
    // h_nocorr.reset(new Zp2TopVLQAllHadHists(ctx, "NoCorr"));
    // h_nocorr_gen.reset(new Zp2TopVLQAllHadHists(ctx, "NoCorrGen"));
    // h_nocuts.reset(new Zp2TopVLQAllHadHists(ctx, "NoCuts"));
    // h_nocuts_gen.reset(new Zp2TopVLQAllHadHists(ctx, "NoCutsGen"));
    // h_preselection.reset(new Zp2TopVLQAllHadHists(ctx, "Preselection"));
    // h_preselection_gen.reset(new Zp2TopVLQAllHadHists(ctx, "PreselectionGen"));
    // h_trigger.reset(new Zp2TopVLQAllHadHists(ctx, "Trigger"));
    // h_alttrigger.reset(new Zp2TopVLQAllHadHists(ctx, "altTrigger"));
    // h_HTtrieffnum.reset(new Zp2TopVLQAllHadHists(ctx, "HTtrieffnum"));
    // h_AK8trieffnum.reset(new Zp2TopVLQAllHadHists(ctx, "AK8trieffnum"));
    // h_trieffden.reset(new Zp2TopVLQAllHadHists(ctx, "trieffden"));
    // h_selection0.reset(new Zp2TopVLQAllHadHists(ctx, "Selection0"));
    // h_selection1.reset(new Zp2TopVLQAllHadHists(ctx, "Selection1"));
    // h_selection2.reset(new Zp2TopVLQAllHadHists(ctx, "Selection2"));
    // h_selection.reset(new Zp2TopVLQAllHadHists(ctx, "Selection"));
    // h_selection_gen.reset(new Zp2TopVLQAllHadHists(ctx, "SelectionGen"));
    // h_ww.reset(new Zp2TopVLQAllHadHists(ctx, "ww"));
    // h_tev.reset(new Zp2TopVLQAllHadHists(ctx, "tev"));
    // h_tv.reset(new Zp2TopVLQAllHadHists(ctx, "tv"));

    //h_topjetsAK8 = ctx.get_handle<std::vector<TopJet> >("patJetsAk8CHSJetsSoftDropPacked_daughters");//, "patJetsCA8CHSprunedPacked");
    //h_topjetsCA15 = ctx.get_handle<std::vector<TopJet> >("patJetsCa15CHSJetsFilteredPacked_daughters");//, "patJetsCA15CHSFilteredPacked");

    // h_njet.reset(new Zp2TopVLQAllHadHists(ctx, "Njet"));
    // h_bsel.reset(new Zp2TopVLQAllHadHists(ctx, "Bsel"));
    // h_ele.reset(new ElectronHists(ctx, "ele_nocuts"));
    // topjet_collection_names = {"patJetsHepTopTagCHSPacked", "patJetsCa8CHSJetsPrunedPacked", "patJetsCa15CHSJetsFilteredPacked", "patJetsHepTopTagPuppiPacked", "patJetsCmsTopTagPuppiPacked", "patJetsCa8PuppiJetsPrunedPacked", "patJetsCa15PuppiJetsFilteredPacked", "patJetsCa8CHSJetsSoftDropPacked", "patJetsCa8PuppiJetsSoftDropPacked"};//"patJetsCmsTopTagCHSPacked",
    // jet_collection_names = {"patJetsCa15CHSJets", "patJetsCa8CHSJets", "patJetsCa15PuppiJets", "patJetsCa8PuppiJets"};
    // for(auto collection_name : jet_collection_names)
    // {
    //     jet_correctors.push_back(std::unique_ptr<GenericJetCorrector>(new GenericJetCorrector(ctx,JERFiles::PHYS14_L123_AK8PFchs_MC,collection_name)));
    // }
    // for(auto collection_name : topjet_collection_names)
    // {
    //     topjet_correctors.push_back(std::unique_ptr<GenericTopJetCorrector>(new GenericTopJetCorrector(ctx,JERFiles::PHYS14_L123_AK8PFchs_MC,collection_name)));
    //     subjet_correctors.push_back(std::unique_ptr<GenericSubJetCorrector>(new GenericSubJetCorrector(ctx,JERFiles::PHYS14_L123_MC,collection_name)));
    // }

    // This is the main procedure, called for each event. Typically,
    // do some pre-processing by calling the modules' process method
    // of the modules constructed in the constructor (1).
    // Then, test whether the event passes some selection and -- if yes --
    // use it to fill the histograms (2).
    // Finally, decide whether or not to keep the event in the output (3);
    // this is controlled by the return value of this method: If it
    // returns true, the event is kept; if it returns false, the event
    // is thrown away.
    
    //cout << "PreselectionModule: Starting to process event (runid, eventid) = (" << event.run << ", " << event.event << "); weight = " << event.weight << endl;

    //print all trigger names    
    // for (unsigned int i=0; i<event.get_current_triggernames().size();i++)
    // cout<< event.get_current_triggernames()[i]<<"\n";
    // cout<<"\n\n\n";

//uhh2::Event::TriggerIndex ti_HT=event.get_trigger_index("HLT_PFHT900*");
//bool HT_trigger = event.passes_trigger(ti_HT);
//const auto topjetsAK8 = &event.get(h_topjetsAK8);
//if ((!HT_trigger)||(topjetsAK8->size()<2)) return false;
//if ((!HT_trigger)||(topjetsAK8->size()<2)) return false;

// if (event.gentopjets){
//     TTbarGen ttbargen(*event.genparticles,false);
//     is_allhad = ttbargen.IsTopHadronicDecay() && ttbargen.IsAntiTopHadronicDecay();
// }

    //if (event.topjets->size()>0) cout<<event.topjets->at(0).pt()<<endl;
    //uncorrect_topjets(event);
    //if (event.topjets->size()>0) cout<<event.topjets->at(0).pt()<<endl<<endl;
    // h_nocorr->fill(event);
    // if (is_allhad) h_nocorr_gen->fill(event);

    // jet_correctors[0]->process(event);
    // for (unsigned int i=0;)
    // for(auto & corrector : jet_correctors)
    // {
    //     corrector->process(event);
    // }
    // for(auto & corrector : topjet_correctors)
    // {
    //     corrector->process(event);
    // }
    // for(auto & corrector : subjet_correctors)
    // {
    //     corrector->process(event);
    // }
    // jetAK8corrector->process(event);
    // jetAK8corrector->process(event);
    // jetCA15corrector->process(event);
    // jetHEPcorrector->process(event);

    // subjetAK8corrector->process(event);
    // subjetCA15corrector->process(event);
    // subjetHEPcorrector->process(event);

    // TopJet the_top;
    // bool has_the_top=false;
    // for(auto topjet : *event.topjets)
    // {
    //     if (TopTag(topjet))
    //     {
    //         the_top=topjet;
    //         has_the_top=true;
    //         break;
    //     }
    // }
    // bool has_the_w=false;
    // TopJet the_w;
    // if (has_the_top)
    // {
    //     for(auto topjet : *topjetsAK8)
    //     {
    //         if (WTag(topjet)&&deltaR(topjet,the_top)>0.8)
    //         {
    //             the_w=topjet;
    //             has_the_w=true;
    //             break;
    //         }
    //     }
    // }
    // bool has_the_b=false;
    // Jet the_b;
    // if (has_the_top && has_the_w)
    // {
    //     for(auto jet : *event.jets)
    //     {
    //         if (jet.btag_combinedSecondaryVertex()>0.890&&deltaR(jet,the_top)>0.8)
    //         {
    //             the_b=jet;
    //             has_the_b=true;
    //             break;
    //         }
    //     }
    // }


     //std::cout<<CMSTopTag()<<std::endl;

    
    //uhh2::Event::TriggerIndex ti_AK8=event.get_trigger_index("HLT_AK8PFJet360_TrimMass30*");

    // std::cout<< "Event" <<std::endl;
    // std::cout<< "CMS ungroomed" <<std::endl;
    // std::cout<< toptag_sel->passes(event) <<std::endl;
    // std::cout<< "CMS groomed" <<std::endl;
    // std::cout<< toptaggroom_sel->passes(event) <<std::endl;
    // std::cout<< "HEP" <<std::endl;
    // std::cout<< toptaghep_sel->passes(event) <<std::endl;
    // std::cout<<std::endl;
    //if(event.topjets->size()>0)
    //{
        //std::cout<< event.topjets->at(0).subjets()[0].v4().M()-event.topjets->at(0).subjets()[0].v4().mass() <<std::endl;
        //std::cout<<  <<std::endl;
    //}


    
    // bool AK8_trigger = event.passes_trigger(ti_AK8);
    // bool HT_cut = getHT50(event)>950.0;
    // bool AK8_cut = getMaxTopJetPt(event)>400.0 && getMaxTopJetMass(event)>35.0;
    // bool DiTopjet_condition = isDiTopjetEvent(event);
    // bool preselection = /*(((HT_trigger && HT_cut) || (AK8_trigger && AK8_cut)) &&*/ (DiTopjet_condition)/*)*/;
    // bool trigger_selection = ((HT_trigger && HT_cut) || (AK8_trigger && AK8_cut));
    // bool alt_trigger_selection = ((AK8_trigger && AK8_cut) && (!(HT_trigger && HT_cut)));
    // bool selection = false;
    // if (DiTopjet_condition)
    //     {
    //         if (TopTag(event.topjets->at(0))&&
    //             TopTag(event.topjets->at(1))&&
    //             (fabs(deltaPhi(event.topjets->at(0),event.topjets->at(1)))>2.1)//&&
    //             //(fabs(deltaY(event.topjets->at(0),event.topjets->at(1)))<1.0)
    //                 ) {selection=true;}
    //     }
    // int nbtag = 0;
    // if (event.topjets->size()>0)
    // {
    //     if (getMaxCSV(event.topjets->at(0))>0.814)
    //     {
    //         nbtag++;
    //     }
    // }
    // if (event.topjets->size()>1)
    // {
    //     if (getMaxCSV(event.topjets->at(1))>0.814)
    //     {
    //         nbtag++;
    //     }
    // } 
    // bool eff_selection = selection && (nbtag>1);
    
    // h_nocuts->fill(event);
    // if (is_allhad) h_nocuts_gen->fill(event);
    // if (preselection)
    // {
    //     h_preselection->fill(event);
    //     if (is_allhad) h_preselection_gen->fill(event);
    // }
    
    // if (trigger_selection)
    // {
    //     h_trigger->fill(event);
    // }
    // if (alt_trigger_selection)
    // {
    //     h_alttrigger->fill(event);
    // }
    
    // if (eff_selection)
    // {
    //     h_trieffden->fill(event);
    //     if (HT_trigger)
    //     {
    //         h_HTtrieffnum->fill(event);
    //     }
    //     if (AK8_trigger)
    //     {
    //         h_AK8trieffnum->fill(event);
    //     }
    // }

    // if (preselection && selection)
    // {
    //     h_selection->fill(event);
    //     if (ZprimeMass(event.topjets->at(0),event.topjets->at(1))>2000.0) cout<<"ditopjet "<<event.run<<":"<<event.luminosityBlock<<":"<<event.event<<" "<<TopJetMass(event.topjets->at(0))<<" "<<TopJetPt(event.topjets->at(0))<<" "<<TopJetMass(event.topjets->at(1))<<" "<<TopJetPt(event.topjets->at(1))<<" "<<ZprimeMass(event.topjets->at(0),event.topjets->at(1))<<" "<<nbtag<<" "<<event.topjets->at(0).eta()<<" "<<event.topjets->at(1).eta()<<endl;
    //     if (is_allhad) h_selection_gen->fill(event);
    // }
    // if (preselection && selection && (nbtag==0))
    // {
    //     h_selection0->fill(event);    
    // }
    // if (preselection && selection && (nbtag==1))
    // {
    //     h_selection1->fill(event);    
    // }
    // if (preselection && selection && (nbtag==2))
    // {
    //     h_selection2->fill(event);    
    // }
    // const auto topjetsAK8 = &event.get(h_topjetsAK8);
    // if (topjetsAK8->size()>1)
    // {
    //     if ((TopJetPt(topjetsAK8->at(0))>200)&&
    //     (TopJetMass(topjetsAK8->at(0))>60)&&
    //     (TopJetMass(topjetsAK8->at(0))<100)&&
    //     (TopJetNsub2(topjetsAK8->at(0))<0.5)&&
    //     (TopJetPt(topjetsAK8->at(1))>200)&&
    //     (TopJetMass(topjetsAK8->at(1))>60)&&
    //     (TopJetMass(topjetsAK8->at(1))<100)&&
    //     (TopJetNsub2(topjetsAK8->at(1))<0.5)&&
    //     (fabs(deltaPhi(topjetsAK8->at(0),topjetsAK8->at(1)))>2.1))
    //     {
    //         h_ww->fill(event);
    //         if (ZprimeMass(topjetsAK8->at(0),topjetsAK8->at(1))>2000.0) cout<<"diwjet "<<event.run<<":"<<event.luminosityBlock<<":"<<event.event<<endl;
    //     }

    //     if ((TopJetPt(topjetsAK8->at(0))>200)&&
    //     (TopJetMass(topjetsAK8->at(0))>50)&&
    //     (TopJetMass(topjetsAK8->at(0))<130)&&
    //     (TopJetNsub2(topjetsAK8->at(0))<0.6)&&
    //     (TopJetPt(topjetsAK8->at(1))>200)&&
    //     (TopJetMass(topjetsAK8->at(1))>50)&&
    //     (TopJetMass(topjetsAK8->at(1))<130)&&
    //     (TopJetNsub2(topjetsAK8->at(1))<0.6)&&
    //     (fabs(deltaPhi(topjetsAK8->at(0),topjetsAK8->at(1)))>2.1))
    //     {
    //         h_tev->fill(event);
    //         if (ZprimeMass(topjetsAK8->at(0),topjetsAK8->at(1))>4000.0) cout<<"tev "<<event.run<<":"<<event.luminosityBlock<<":"<<event.event<<" "<<ZprimeMass(topjetsAK8->at(0),topjetsAK8->at(1))<<endl;
    //     }
    // }
    // if ((event.topjets->size()>1)&&(topjetsAK8->size()>1))
    // {
    //     if (((TopTag(event.topjets->at(0)))&&
    //         (TopJetPt(event.topjets->at(0))>400)&&
    //         (TopJetPt(topjetsAK8->at(1))>200)&&
    //         (TopJetMass(topjetsAK8->at(1))>60)&&
    //         (TopJetMass(topjetsAK8->at(1))<130)&&
    //         (TopJetNsub2(topjetsAK8->at(1))<0.5)&&
    //         (fabs(deltaPhi(event.topjets->at(0),topjetsAK8->at(1)))>2.1)) ||
    //         ((TopTag(event.topjets->at(1)))&&
    //         (TopJetPt(event.topjets->at(1))>400)&&
    //         (TopJetPt(topjetsAK8->at(0))>200)&&
    //         (TopJetMass(topjetsAK8->at(0))>60)&&
    //         (TopJetMass(topjetsAK8->at(0))<130)&&
    //         (TopJetNsub2(topjetsAK8->at(0))<0.5)&&
    //         (fabs(deltaPhi(event.topjets->at(1),topjetsAK8->at(0)))>2.1))

    //         )
    //     {
    //         h_tv->fill(event);
    //         if (ZprimeMass(event.topjets->at(0),topjetsAK8->at(1))>3000.0 || ZprimeMass(event.topjets->at(1),topjetsAK8->at(0))>3000.0 ) cout<<"tv "<<event.run<<":"<<event.luminosityBlock<<":"<<event.event<<endl;
    //     }
    // }
    // return preselection;

# thetafile=TFile('theta.root','RECREATE')
# thetafile.cd()
# for i in ['0','1','2']:
# 	ttbar_file.Get('Selection'+i+'/m12CMS').Write('allhad'+i+'btag__ttbar')
# 	qcd_file.Get('Background'+i+'/m12CMS').Write('allhad'+i+'btag__qcd')
# 	signal_files[1].Get('Selection'+i+'/m12CMS').Write('allhad'+i+'btag__zp1000')
# 	signal_files[3].Get('Selection'+i+'/m12CMS').Write('allhad'+i+'btag__zp2000')
# 	signal_files[5].Get('Selection'+i+'/m12CMS').Write('allhad'+i+'btag__zp3000')
# thetafile.Close()

# outfile.cd()

# #'NoCuts/' 'Preselection/	'
# #pileup
# for i in ['N_pv','m1CA8','m2CA8','m12CA8','m1CMS','m2CMS','m12CMS','pT1CMS','pT2CMS','HT']:
# 	maxx=0
# 	if 'm12' in i:
# 		maxx=3000
# 	if 'HT' in i:
# 		maxx=3000
# 	if 'm1C' in i or 'm2C' in i:
# 		maxx=600
# 	if 'pT' in i:
# 		maxx=1400
# 	compare(i+'_NoCut_25vs50ns',[ttbar_file,ttbar50ns_file],['NoCuts/'+i,'NoCuts/'+i],['PU=20 BX=25ns','PU=4 BX=50ns'],True,'hE',i,maxx)
# 	compare(i+'_Pre_25vs50ns',[ttbar_file,ttbar50ns_file],['Preselection/'+i,'Preselection/'+i],['PU=20 BX=25ns','PU=4 BX=50ns'],True,'hE',i,maxx)
# #btagging
# for i in ['csv_1','csv_2']:
# 	compare(i+'_NoCut_btag',[ttbar_file,qcd_file],['NoCuts/'+i,'NoCuts/'+i],['t#bar{t}','QCD'],True,'hE',i,maxx)
# 	compare(i+'_Pre_btag',[ttbar_file,qcd_file],['Preselection/'+i,'Preselection/'+i],['t#bar{t}','QCD'],True,'hE',i,maxx)
# 	compare(i+'_NoCut_Zbtag',[signal_files[0],signal_files[2],signal_files[4]],['NoCuts/'+i,'NoCuts/'+i,'NoCuts/'+i],["Z' 1TeV","Z' 2TeV","Z' 3TeV"],True,'hE',i,maxx)
# 	compare(i+'_Pre_Zbtag',[signal_files[0],signal_files[2],signal_files[4]],['Preselection/'+i,'Preselection/'+i,'Preselection/'+i],["Z' 1TeV","Z' 2TeV","Z' 3TeV"],True,'hE',i,maxx)
#jet

# compare('mttbar',[signal_files[0]]*1,['Selection/m12CMS'],['13TeV Data'],False,'hE','mttbar [GeV]','Events',0,5000,rebin=6,textsizefactor=0.75)
# compare('mww',[signal_files[0]]*1,['ww/m12AK8'],['13TeV Data'],False,'hE','mww [GeV]','Events',0,5000,rebin=6,textsizefactor=0.75,logy=True,miny=0.5,maxy=1000)
# compare('mww2',[signal_files[0]]*1,['tev/m12AK8'],['13TeV Data'],False,'hE','mww [GeV]','Events',0,5000,rebin=6,textsizefactor=0.75,logy=True,miny=0.5,maxy=10000)
# compare('mtv',[signal_files[0]]*1,['tev/m12AK8CMS'],['13TeV Data'],False,'hE','mtw [GeV]','Events',400,5000,rebin=6,textsizefactor=0.75,logy=True,miny=0.5,maxy=10000)
# compare('mtv2',[signal_files[0]]*1,['tev/m12CMSAK8'],['13TeV Data'],False,'hE','mtw [GeV]','Events',400,5000,rebin=6,textsizefactor=0.75,logy=True,miny=0.5,maxy=10000)

# for i in ['m1','m2','m12','pT1','pT2','nsub_1CMS','nsub_2CMS','csv_1','csv_2','mmin1','mmin2','ndau1','ndau2']:

# 	#compare(i+'_new',[signal_files[1]]*2,['NoCutsGen/'+i+'CMS','NoCutsGen/'+i+'_patJetsCmsTopTagPuppiPacked'],['CMS chs','CMS puppi'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',1000,2500,rebin=1)
# 	#compare(i+'_new2',[signal_files[1]]*4,['NoCutsGen/'+i+'_patJetsCa8CHSJetsPrunedPacked','NoCutsGen/'+i+'_patJetsCa8PuppiJetsPrunedPacked','NoCutsGen/'+i+'_patJetsCa8CHSJetsSoftDropPacked','NoCutsGen/'+i+'_patJetsCa8PuppiJetsSoftDropPacked'],['CA8 chs pruned','CA8 puppi pruned','CA8 chs sd','CA8 puppi sd'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',1000,2500,rebin=1)
# 	#compare(i+'_new4',[signal_files[1]]*7,['NoCutsGen/'+i+'_patJetsCa8CHSJetsPrunedPacked','NoCutsGen/'+i+'_patJetsCa8PuppiJetsPrunedPacked','NoCutsGen/'+i+'_patJetsCa8CHSJetsSoftDropPacked','NoCutsGen/'+i+'_patJetsCa8PuppiJetsSoftDropPacked','NoCutsGen/'+i+'_patJetsCa8CHSJets','NoCutsGen/'+i+'_patJetsCa8PuppiJets','NoCutsGen/'+i+'CMS'],['CA8 chs pruned','CA8 puppi pruned','CA8 chs sd','CA8 puppi sd','CA8 CHS','CA8 puppi','CMS'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',1000,2500,rebin=1)
# 	#compare(i+'_new3',[signal_files[1]]*2,['NoCutsGen/'+i+'_patJetsCa15CHSJetsFilteredPacked','NoCutsGen/'+i+'_patJetsCa15PuppiJetsFilteredPacked'],['CA15 chs filtered','CA15 puppi filtered'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',1000,2500,rebin=1)
	
# 	if i in ['m1','m2','m12']:
# 		lim=400
# 		rb=4
# 		if i=='m12':
# 			lim=4000
# 			rb=1
# 		compare(i+'_1tev',[signal_files[0]]*8,['NoCutsGen/'+i+'CMS','NoCutsGen/'+i+'CMSfat','NoCutsGen/'+i+'AK8','NoCutsGen/'+i+'CA15','NoCutsGen/'+i+'AK4x3R8','NoCutsGen/'+i+'AK4x4R8','NoCutsGen/'+i+'AK4x3R15','NoCutsGen/'+i+'AK4x4R15'],['CMS','CMSfat','AK8','CA15','AK4x3R8','AK4x4R8','AK4x3R15','AK4x4R15'],True,'histo',i+' [GeV]','Fraction of events',0,lim,rebin=rb)
# 		compare(i+'_2tev',[signal_files[1]]*8,['NoCutsGen/'+i+'CMS','NoCutsGen/'+i+'CMSfat','NoCutsGen/'+i+'AK8','NoCutsGen/'+i+'CA15','NoCutsGen/'+i+'AK4x3R8','NoCutsGen/'+i+'AK4x4R8','NoCutsGen/'+i+'AK4x3R15','NoCutsGen/'+i+'AK4x4R15'],['CMS','CMSfat','AK8','CA15','AK4x3R8','AK4x4R8','AK4x3R15','AK4x4R15'],True,'histo',i+' [GeV]','Fraction of events',0,lim,rebin=rb)
# 		compare(i+'_3tev',[signal_files[2]]*8,['NoCutsGen/'+i+'CMS','NoCutsGen/'+i+'CMSfat','NoCutsGen/'+i+'AK8','NoCutsGen/'+i+'CA15','NoCutsGen/'+i+'AK4x3R8','NoCutsGen/'+i+'AK4x4R8','NoCutsGen/'+i+'AK4x3R15','NoCutsGen/'+i+'AK4x4R15'],['CMS','CMSfat','AK8','CA15','AK4x3R8','AK4x4R8','AK4x3R15','AK4x4R15'],True,'histo',i+' [GeV]','Fraction of events',0,lim,rebin=rb)
# 		compare(i+'_4tev',[signal_files[3]]*8,['NoCutsGen/'+i+'CMS','NoCutsGen/'+i+'CMSfat','NoCutsGen/'+i+'AK8','NoCutsGen/'+i+'CA15','NoCutsGen/'+i+'AK4x3R8','NoCutsGen/'+i+'AK4x4R8','NoCutsGen/'+i+'AK4x3R15','NoCutsGen/'+i+'AK4x4R15'],['CMS','CMSfat','AK8','CA15','AK4x3R8','AK4x4R8','AK4x3R15','AK4x4R15'],True,'histo',i+' [GeV]','Fraction of events',0,lim,rebin=rb)
# 	elif i in ['pT1','pT2','csv_1','csv_2']:
# 		lim=2000
# 		rb=1
# 		if 'pT' in i:
# 			rb=8
# 		compare(i+'_1tev',[signal_files[0]]*3,['NoCutsGen/'+i+'CMS','NoCutsGen/'+i+'AK8','NoCutsGen/'+i+'CA15'],['CMS','AK8','CA15'],True,'histo',i+' [GeV]','Fraction of events',0,lim,rebin=rb)
# 		compare(i+'_2tev',[signal_files[1]]*3,['NoCutsGen/'+i+'CMS','NoCutsGen/'+i+'AK8','NoCutsGen/'+i+'CA15'],['CMS','AK8','CA15'],True,'histo',i+' [GeV]','Fraction of events',0,lim,rebin=rb)
# 		compare(i+'_3tev',[signal_files[2]]*3,['NoCutsGen/'+i+'CMS','NoCutsGen/'+i+'AK8','NoCutsGen/'+i+'CA15'],['CMS','AK8','CA15'],True,'histo',i+' [GeV]','Fraction of events',0,lim,rebin=rb)
# 		compare(i+'_4tev',[signal_files[3]]*3,['NoCutsGen/'+i+'CMS','NoCutsGen/'+i+'AK8','NoCutsGen/'+i+'CA15'],['CMS','AK8','CA15'],True,'histo',i+' [GeV]','Fraction of events',0,lim,rebin=rb)
# 	elif i in ['nsub_1CMS','nsub_2CMS','mmin1','mmin2','ndau1','ndau2']:
# 		compare(i+'_1tev',[signal_files[0]]*1,['NoCutsGen/'+i],['CMS'],True,'histo',i+' [GeV]','Fraction of events',0,lim,rebin=1)
# 		compare(i+'_2tev',[signal_files[1]]*1,['NoCutsGen/'+i],['CMS'],True,'histo',i+' [GeV]','Fraction of events',0,lim,rebin=1)
# 		compare(i+'_3tev',[signal_files[2]]*1,['NoCutsGen/'+i],['CMS'],True,'histo',i+' [GeV]','Fraction of events',0,lim,rebin=1)
# 		compare(i+'_4tev',[signal_files[3]]*1,['NoCutsGen/'+i],['CMS'],True,'histo',i+' [GeV]','Fraction of events',0,lim,rebin=1)
	#compare(i+'_new3tev',[signal_files[2]]*7,['NoCutsGen/'+i+'_patJetsCa8CHSJetsPrunedPacked','NoCutsGen/'+i+'_patJetsCa8PuppiJetsPrunedPacked','NoCutsGen/'+i+'_patJetsCa8CHSJetsSoftDropPacked','NoCutsGen/'+i+'_patJetsCa8PuppiJetsSoftDropPacked','NoCutsGen/'+i+'_patJetsCa8CHSJets','NoCutsGen/'+i+'_patJetsCa8PuppiJets','NoCutsGen/'+i+'CMS'],['CA8 chs pruned','CA8 puppi pruned','CA8 chs sd','CA8 puppi sd','CA8 CHS','CA8 puppi','CMS'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',2000,4000,rebin=1)
	#compare(i+'_newqcd',[qcd_file]*7,['NoCuts/'+i+'_patJetsCa8CHSJetsPrunedPacked','NoCuts/'+i+'_patJetsCa8PuppiJetsPrunedPacked','NoCuts/'+i+'_patJetsCa8CHSJetsSoftDropPacked','NoCuts/'+i+'_patJetsCa8PuppiJetsSoftDropPacked','NoCuts/'+i+'_patJetsCa8CHSJets','NoCuts/'+i+'_patJetsCa8PuppiJets','NoCuts/'+i+'CMS'],['CA8 chs pruned','CA8 puppi pruned','CA8 chs sd','CA8 puppi sd','CA8 CHS','CA8 puppi','CMS'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',0,2500,rebin=1)

# compare(i+'_dpg2tev',[signal_files[1]]*4,['SelectionGen/'+i+'_patJetsCa8CHSJetsPrunedPacked','SelectionGen/'+i+'_patJetsCa8PuppiJetsPrunedPacked','SelectionGen/'+i+'_patJetsCa8CHSJetsSoftDropPacked','SelectionGen/'+i+'_patJetsCa8PuppiJetsSoftDropPacked'],['CA8 CHS pruned','CA8 PUPPI pruned','CA8 CHS soft drop','CA8 PUPPI soft drop'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',500,2500,rebin=1,textsizefactor=0.75)
# compare(i+'_dpg1tev',[signal_files[0]]*4,['SelectionGen/'+i+'_patJetsCa8CHSJetsPrunedPacked','SelectionGen/'+i+'_patJetsCa8PuppiJetsPrunedPacked','SelectionGen/'+i+'_patJetsCa8CHSJetsSoftDropPacked','SelectionGen/'+i+'_patJetsCa8PuppiJetsSoftDropPacked'],['CA8 CHS pruned','CA8 PUPPI pruned','CA8 CHS soft drop','CA8 PUPPI soft drop'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',0,2000,rebin=1)
# compare(i+'_dpg3tev',[signal_files[2]]*4,['SelectionGen/'+i+'_patJetsCa8CHSJetsPrunedPacked','SelectionGen/'+i+'_patJetsCa8PuppiJetsPrunedPacked','SelectionGen/'+i+'_patJetsCa8CHSJetsSoftDropPacked','SelectionGen/'+i+'_patJetsCa8PuppiJetsSoftDropPacked'],['CA8 CHS pruned','CA8 PUPPI pruned','CA8 CHS soft drop','CA8 PUPPI soft drop'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',1000,4000,rebin=2)
# compare(i+'_dpgqcd',[qcd_file]*4,['Selection/'+i+'_patJetsCa8CHSJetsPrunedPacked','Selection/'+i+'_patJetsCa8PuppiJetsPrunedPacked','Selection/'+i+'_patJetsCa8CHSJetsSoftDropPacked','Selection/'+i+'_patJetsCa8PuppiJetsSoftDropPacked'],['CA8 CHS pruned','CA8 PUPPI pruned','CA8 CHS soft drop','CA8 PUPPI soft drop'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',0,2500,rebin=3)

# i='m1'
# compare(i+'_dpg2tev',[signal_files[1]]*4,['NoCutsGen/'+i+'_patJetsCa8CHSJetsPrunedPacked','NoCutsGen/'+i+'_patJetsCa8PuppiJetsPrunedPacked','NoCutsGen/'+i+'_patJetsCa8CHSJetsSoftDropPacked','NoCutsGen/'+i+'_patJetsCa8PuppiJetsSoftDropPacked'],['CA8 CHS pruned','CA8 PUPPI pruned','CA8 CHS soft drop','CA8 PUPPI soft drop'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',0,300,rebin=1,textsizefactor=0.75)
# compare(i+'_dpg1tev',[signal_files[0]]*4,['NoCutsGen/'+i+'_patJetsCa8CHSJetsPrunedPacked','NoCutsGen/'+i+'_patJetsCa8PuppiJetsPrunedPacked','NoCutsGen/'+i+'_patJetsCa8CHSJetsSoftDropPacked','NoCutsGen/'+i+'_patJetsCa8PuppiJetsSoftDropPacked'],['CA8 CHS pruned','CA8 PUPPI pruned','CA8 CHS soft drop','CA8 PUPPI soft drop'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',0,300,rebin=1)
# compare(i+'_dpg3tev',[signal_files[2]]*4,['NoCutsGen/'+i+'_patJetsCa8CHSJetsPrunedPacked','NoCutsGen/'+i+'_patJetsCa8PuppiJetsPrunedPacked','NoCutsGen/'+i+'_patJetsCa8CHSJetsSoftDropPacked','NoCutsGen/'+i+'_patJetsCa8PuppiJetsSoftDropPacked'],['CA8 CHS pruned','CA8 PUPPI pruned','CA8 CHS soft drop','CA8 PUPPI soft drop'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',0,300,rebin=1)
# compare(i+'_dpgqcd',[qcd_file]*4,['NoCuts/'+i+'_patJetsCa8CHSJetsPrunedPacked','NoCuts/'+i+'_patJetsCa8PuppiJetsPrunedPacked','NoCuts/'+i+'_patJetsCa8CHSJetsSoftDropPacked','NoCuts/'+i+'_patJetsCa8PuppiJetsSoftDropPacked'],['CA8 CHS pruned','CA8 PUPPI pruned','CA8 CHS soft drop','CA8 PUPPI soft drop'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',0,300,rebin=1)

# for i in ['m12']:
# 	maxx=0
# 	if 'm1' in i or 'm2' in i:
# 		maxx=600
# 	if 'm12' in i:
# 		maxx=3000
# 	if 'pT' in i:
# 		maxx=1400
	# compare(i+'_NoCutGen_jet',[signal_files[-1],signal_files[-1],signal_files[-1],signal_files[-1]],['NoCutsGen/'+i+'AK4x4R15','NoCutsGen/'+i+'CA15','NoCutsGen/'+i+'CMS','NoCutsGen/'+i+'gen'],['up to 4 closest AK4 to CMSJet within R=1.5','CA15 filtered','CMSTT Jet','CMS gen. Jet'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',1000,2500,rebin=1)
	# compare(i+'_SelGen_jet',[signal_files[-1],signal_files[-1],signal_files[-1],signal_files[-1]],['SelectionGen/'+i+'AK4x4R15','SelectionGen/'+i+'CA15','SelectionGen/'+i+'CMS','SelectionGen/'+i+'gen'],['up to 4 closest AK4 to CMSJet within R=1.5','CA15 filtered','CMSTT Jet','CMS gen. Jet'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',1000,2500,1)
	# compare(i+'_Sel_jet',[signal_files[-1],signal_files[-1],signal_files[-1],signal_files[-1]],['Selection/'+i+'AK4x4R15','Selection/'+i+'CA15','Selection/'+i+'CMS','Selection/'+i+'gen'],['up to 4 closest AK4 to CMSJet within R=1.5','CA15 filtered','CMSTT Jet','CMS gen. Jet'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',1000,2500,1)
	# compare(i+'_Sel_jetqcd',[qcd_file,qcd_file,qcd_file],['Selection/'+i+'AK4x4R15','Selection/'+i+'CA15','Selection/'+i+'CMS'],['up to 4 closest AK4 to CMSJet within R=1.5','CA15 filtered','CMSTT Jet'],True,'histo','m_{t#bar{t}} [GeV]','Fraction of events',100,2500,4)
	# # compare(i+'_Pre_jet',[signal_files[2],signal_files[2],signal_files[2],signal_files[2]],['Preselection/'+i+'CA8','Preselection/'+i+'CA15','Preselection/'+i+'CMS','Preselection/'+i+'HEP'],['CA8 pruned','CA15 filtered','CMSTT','HEPTT'],True,'hE',i,maxx)
	# compare(i+'_NoCut_jetqcd',[qcd_file,qcd_file,qcd_file,qcd_file],['NoCuts/'+i+'CA8','NoCuts/'+i+'CA15','NoCuts/'+i+'CMS','NoCuts/'+i+'HEP'],['CA8 pruned','CA15 filtered','CMSTT','HEPTT'],True,'histo',i,'Fraction of events',0.001,maxx,1)

	# compare(i+'_NoCut_JEC',[signal_files[2],signal_files[6]],['NoCuts/'+i+'CMS','NoCuts/'+i+'CMS'],['CMSTT subjets corrected with AK4 JEC','CMSTT subjets uncorrected'],True,'histo',i,'Fraction of events',0.001,maxx,1)
	# maxx=4000
	# compare(i+'_NoCut_jet3',[signal_files[4],signal_files[4],signal_files[4],signal_files[4]],['NoCuts/'+i+'CA8','NoCuts/'+i+'CA15','NoCuts/'+i+'CMS','NoCuts/'+i+'HEP'],['CA8 pruned','CA15 filtered','CMSTT','HEPTT'],True,'histo',i,'Fraction of events',1000,maxx,1)
	# compare(i+'_NoCut_JEC3',[signal_files[4],signal_files[7]],['NoCuts/'+i+'CMS','NoCuts/'+i+'CMS'],['CMSTT subjets corrected with AK4 JEC','CMSTT subjets uncorrected'],True,'histo',i,'Fraction of events',1000,maxx,1)
	# compare(i+'_Pre_jetqcd',[qcd_file,qcd_file,qcd_file,qcd_file],['Preselection/'+i+'CA8','Preselection/'+i+'CA15','Preselection/'+i+'CMS','Preselection/'+i+'HEP'],['CA8 pruned','CA15 filtered','CMSTT','HEPTT'],True,'hE',i,maxx)
# #trigger
# doeff(signal_files[-2], 'trieffden/HT','HTtrieffnum/HT', 'HTTrigger_1TeV', outfile)
# doeff(ttbar_file, 'trieffden/HT','HTtrieffnum/HT', 'HTTrigger_ttbar', outfile,2)
# compare('HTTrigger_1TeV',[outfile],['HTTrigger_1TeV'],["PFHT900 efficiency (Z' 1 TeV)"],xtitle='HT [GeV]',minx=800,maxx=1800,drawoption='')
# compare('HTTrigger_ttbar',[outfile],['HTTrigger_ttbar'],['HTTrigger_ttbar'],False,'','HT [GeV]',4000)
# doeff(signal_files[-2], 'trieffden/pT1CA8','AK8trieffnum/pT1CA8', 'AK8Trigger_1TeV', outfile,2)
# doeff(ttbar_file, 'trieffden/pT1CA8','AK8trieffnum/pT1CA8', 'AK8Trigger_ttbar', outfile,2)
# compare('AK8Trigger_1TeV',[outfile],['AK8Trigger_1TeV'],["AK8PFJet360TrimModMass30 eff. (Z' 1 TeV)"],False,'','pT1 [GeV]')
# compare('AK8Trigger_ttbar',[outfile],['AK8Trigger_ttbar'],['AK8Trigger_ttbar'],False,'','pT1 [GeV]',2000)

#jet response
# compare('responsevspt',[signal_files[-1]],['NoCutsGen/ptratioVSpt'],['CMS TopJet response'],minx=200,maxx=1200, miny=0.95,maxy=1.05,drawoption='E',xtitle='p_{T,gen} [GeV]',ytitle='p_{T,reco}/p_{T,gen}',textsizefactor=0.8)
# compare('responsevsnpv',[signal_files[-1]],['NoCutsGen/ptratioVSnpv'],['CMS TopJet response'],minx=8,maxx=34, miny=0.95,maxy=1.05,drawoption='E',xtitle='N_{pv}',ytitle='p_{T,reco}/p_{T,gen}',textsizefactor=0.8)
# compare('responseak4',[signal_files[-1]],['NoCutsGen/ptratioVSptAK4'],['AK4 response'],minx=50,maxx=1500, miny=0.9,maxy=1.1,drawoption='E',xtitle='p_{T,gen} [GeV]',ytitle='p_{T,reco}/p_{T,gen}',textsizefactor=0.8,rebin=5)

#stack
# make_plot('Selection0', ttbar_file, qcd_file, [signal_files[0],signal_files[2],signal_files[4]], 'Selection0/m12CMS','Background0/m12CMS',4,500,4000,1,10000,True)
# make_plot('Selection1', ttbar_file, qcd_file, [signal_files[0],signal_files[2],signal_files[4]], 'Selection1/m12CMS','Background1/m12CMS',4,500,4000,1,10000,True)
# make_plot('Selection2', ttbar_file, qcd_file, [signal_files[0],signal_files[2],signal_files[4]], 'Selection2/m12CMS','Background2/m12CMS',4,500,4000,1,1000,True)
